#!/bin/sh

echo "-----------"
echo "$PATH1 - PATH1"
echo "-----------"


#############################################################################################################
#          WarningAsk																						#
#-----------------------------------------------------------------------------------------------------------{
function FuncWarningAsk() {


	# desktop_enviroment=KDE,LXDE ...
	export GRAPHIC=$(awk 'NR==1'  /tmp/gdi/action)


	#---------------------{
	# color ball
	LINK1=$(file /tmp/gdi/StateBall${GRAPHIC}.png)

	# variables
	if echo $LINK1 | grep -q "red_ball"; then
		export	BALL="green_ball"
		export	WORK="Install"
		export  APT="install"
	elif echo $LINK1 | grep -q "green_ball"; then
		export	BALL="red_ball"
		export	WORK="Uninstall"
		export  APT="remove"
	else
		echo "Error: Not found link ball in /tmp/gdi/StateBall${GRAPHIC}.png  "
	fi
	#---------------------}


	#---------------------
	# Create folder gdi for logs.
	if [ -d /var/log/gdi ]
	then
		echo "Folder gdi for logs exist."
	else
		mkdir /var/log/gdi
	fi
	#---------------------

	#---------------------------------------------------------------------------------------------
	COUNT=$(ls -l /tmp/gdi/ | grep StateBall | grep green_ball | wc -l)
	echo "Installed desktop enviroments: $COUNT"
	#---------------------------------------------------------------------------------------------

	#-------------------------------------------------------{
	# "arch" command show which system you have (32bit or 64bit)
	arch=`arch`

	# For 32 bit and 64 bit Support :-)
	if [[ "$arch" == "x86_64" ]]; then
		# 64 bit system
		cat `pwd`/data/list/${GRAPHIC}.list > /tmp/gdi/packages.list
	else
		# for example 32 bit system
		cat `pwd`/data/list/${GRAPHIC}.list | sed 's/lib64/lib/' > /tmp/gdi/packages.list
	fi
	#-------------------------------------------------------}

	#-------------------------------------------------------{

	# /tmp/gdi/packages.1.list

	# Lista srodowisk zainstalowanych



	# question inside "WarningAsk" window.
	export ASK="Are you sure you want $WORK $GRAPHIC ?		"
		echo "You choose: $WORK , $GRAPHIC"

	# count lines for "WarningAsk" window.
	export CountLines=$(cat `pwd`/data/list/${GRAPHIC}.list | wc -l)

	# if is less than or equal to 1
	if [[ "$COUNT" -le "1" ]]; then
		if [ "$WORK" = "Uninstall" ]; then
			# This warning will protects you from deleting the last environment
			$PATH1/WarningBarrier
		else
			$PATH1/WarningAsk	
		fi
	else
			$PATH1/WarningAsk
	fi
	#-------------------------------------------------------}

	#----------------------------------------
	# Keep only last "n" logs and remove other. 
	n=5        # Maximum number of files to keep
	k=$(ls -tr /var/log/gdi/*.log)
	k2=$(echo $k | wc -l)
	if [ "$k2" -gt 0 ] ; then
		table1=($k)
		((${#table1[@]} <= n)) || rm -f -- "${table1[@]:0:${#table1[@]}-n}"  # remove logs
	fi
	#----------------------------------------

	#------------------------------------------------------------------------
	# the log file name .log will have date and hour
	NAMELOG="$(date +"%Y-%m-%d_%R_%S").log"

	# Window with terminal will install and uninstall packages.
	if [ $(<"$TMPDIR"/action) = 1 ]; then
		# Before run terminal all comands should be saved to /tmp/gdi/commands
		# "packages.list" file is created before execute "WarningAsk"
		echo -e "apt-get -y $APT \$(cat /tmp/gdi/packages.list) 2>&1 | tee /var/log/gdi/"$NAMELOG""   > "/tmp/gdi/commands"
		echo "exit" >> "/tmp/gdi/commands"

		# Terminal running and commands from /tmp/gdi/commands inside this terminal.
		$PATH1/WindowTerminal

		# Refresh icon
		#   Function will update icon in "/tmp/gdi/" folder
		FuncButtonsActivity

		#   Debug line
		echo "$PATH1/icons/gdi/${BALL}.png /tmp/gdi/StateBall${GRAPHIC}.png"
		#   Window
		$PATH1/WarningReady
		echo "End FuncWarningAsk"
	else
		echo "Nothing to do"
	fi
	#------------------------------------------------------------------------

	}
export -f FuncWarningAsk
#----------------------------------------------------------------------------------------------------------}																										
#          WarningAsk																						#
#############################################################################################################




##########################################################################################################
																										##
#-----------------------------------------------------------------------------{
function FuncButtonsActivity() {
	MSG="Zainstalowane Å›rodowisko graficzne:"
	INSTDE=$(grep -h "Name=" /etc/X11/dm/Sessions/* | cut -c 6-)

# AfterStep
			test1=$(echo "$INSTDE" | grep "AfterStep")
			if [[ "$test1" == "AfterStep" ]]; then
				echo $MSG AfterStep
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallAfterStep.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallAfterStep.png
			fi

# Cinnamon
			test1=$(echo "$INSTDE" | grep -v "Cinnamon2D" | grep "Cinnamon")
			if [[ "$test1" == "Cinnamon" ]]; then
				echo $MSG Cinnamon
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallCinnamon.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallCinnamon.png
			fi

# Enlightenment
			test1=$(echo "$INSTDE" | grep "E19")
			if [[ "$test1" == "E19" ]]; then
				echo $MSG Enlightenment
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallEnlightenment.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallEnlightenment.png
			fi

# Fluxbox
			test1=$(echo "$INSTDE" | grep "Fluxbox")
			if [[ "$test1" == "Fluxbox" ]]; then
				echo $MSG Fluxbox
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallFluxbox.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallFluxbox.png
			fi

# FVWM
			test1=$(echo "$INSTDE" | grep "Fvwm2")
			if [[ "$test1" == "Fvwm2" ]]; then
				echo $MSG FVWM
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallFVWM.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallFVWM.png
			fi

# IceWM
			test1=$(echo "$INSTDE" | grep "IceWM")
			if [[ "$test1" == "IceWM" ]]; then
				echo $MSG IceWM
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallIceWM.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallIceWM.png
			fi

# KDE
			test1=$(echo "$INSTDE" | grep -v "Openbox-KDE" | grep "KDE")
			if [[ "$test1" == "KDE" ]]; then
				echo $MSG KDE4
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallKde.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallKde.png
			fi

# LXDE
			if [[ "$INSTDE" == *"LXDE"* ]]; then
				echo $MSG LXDE
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallLxde.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallLxde.png
			fi

# MATE
			if [[ "$INSTDE" == *"MATE"* ]]; then
				echo $MSG MATE
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallMate.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallMate.png
			fi

# Openbox
			if [[ "$INSTDE" == *"Openbox"* ]]; then
				echo $MSG Openbox
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallOpenbox.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallOpenbox.png
			fi

# Razorqt
			if [[ "$INSTDE" == *"RazorDesktop"* ]]; then
				echo $MSG Razorqt
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallRazorqt.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallRazorqt.png
			fi

# WindowMaker
			if [[ "$INSTDE" == *"WindowMaker"* ]]; then
				echo $MSG WindowMaker
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallWindowMaker.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallWindowMaker.png
			fi

# XFCE
			if [[ "$INSTDE" == *"xfce4"* ]]; then
				echo $MSG Xfce4
				ln -sfn $PATH1/icons/gdi/green_ball.png "$TMPDIR"/StateBallXfce.png
			else
				ln -sfn $PATH1/icons/gdi/red_ball.png "$TMPDIR"/StateBallXfce.png
			fi
}
export -f FuncButtonsActivity
#-----------------------------------------------------------------------------}

																										##
##########################################################################################################




##########################################################################################################
																										##
function funcURLOpen() {
	if [ -z "$BASH" ]; then local FUNCNAME=funcURLOpen; fi

	## Local variables.
	local browser=

	if [ -n "$BROWSER" ]; then
		browser="$BROWSER"
	elif [ -n "$DEFAULTBROWSER" ]; then
		browser="$DEFAULTBROWSER"
	elif [ `command -v mozilla` ]; then
		browser=mozilla
	elif [ `command -v firefox` ]; then
		browser=firefox
	elif [ `command -v chromium` ]; then
		browser=chromium
	elif [ `command -v opera` ]; then
		browser=opera
	elif [ `command -v konqueror` ]; then
		browser=konqueror
	elif [ `command -v midori` ]; then
		browser=midori
	elif [ `command -v dillo` ]; then
		browser=dillo
	fi



	if [ -n "$browser" ]; then
		$browser "$1" &
	else
		echo "$FUNCNAME(): Couldn't find a suitable browser."
	fi

}
export -f funcURLOpen
																										##
##########################################################################################################
